#!/usr/bin/env ruby

abort "needs ruby 1.9.X or better" unless RUBY_VERSION >= "1.9.0"

require "open3"

USER = "caleb"
# Turning off ControlMaster because that it will cause Open3 to hang (it's waiting on the spawned child).
SSH_OPTIONS = "-o PasswordAuthentication=no -o UserKnownHostsFile=/dev/null -o ControlMaster=no"
SSH = "ssh #{SSH_OPTIONS}"
SCP = "scp #{SSH_OPTIONS}"

USAGE = <<EOS
Usage:

    $ remote-useradd HOSTNAME

This sript sets up my user account on a new machine and makes it a bit nicer
to use. First try to log in passwordless; if that fails try to log in as root.
If I can log in as root, copy my keys over and then set it up.

Setup:

- ssh-copy-id (if necessary)
- Copy over files:
  * .bashrc.cespare
  * .inputrc
- Set up ~/.bashrc to source .bashrc.cespare (if necessary)
EOS

# Returns a [stdout, stderr, statuscode] triple.
def run(c)
  out, err, p = Open3.capture3(c)
  [out, err, p.exitstatus]
end

def run_and_abort(s)
  out, err, status = run(s)
  if status != 0
    STDERR.puts err
    abort "Command failed: #{s}"
  end
  return [out, err]
end

if ARGV.size != 1
  abort USAGE
end

HOST = ARGV[0]
if %w{-h --help help}.include?(HOST)
  puts USAGE
  exit 0
end

if HOST.include? "@"
  abort "Expecting hostname only."
end

# See if we can log in directly
_, err, status = run("#{SSH} #{USER}@#{HOST} pwd")
if status != 0
  STDERR.puts err
  puts "Cannot log in as #{USER}; trying as root."
  useradd = "useradd -d /home/#{USER} -s /bin/bash -U -m #{USER}"
  _, err, status = run(%Q[#{SSH} root@#{HOST} #{useradd}])
  if status != 0
    STDERR.puts err
    abort "Cannot log in with pubkey auth as either #{USER} or root."
  end
  # Unfortunately, ssh-copy-id doesn't help us here :\ Manually copy the key over.
  key, err, status = run("ssh-add -L")
  if status != 0
    STDERR.puts err
    abort "Couldn't get ssh key from ssh-add -L."
  end
  run_and_abort("#{SSH} root@#{HOST} mkdir /home/#{USER}/.ssh")
  auth_keys = "/home/#{USER}/.ssh/authorized_keys"
  run_and_abort(%Q[#{SSH} root@#{HOST} "echo '#{key}' >> #{auth_keys}"])
  run_and_abort("#{SSH} root@#{HOST} chown #{USER}:#{USER} #{auth_keys}")
  run_and_abort("#{SSH} root@#{HOST} chmod 600 #{auth_keys}")
end

def copy_file(path)
  run_and_abort("#{SCP} #{path} #{USER}@#{HOST}:#{path}")
end

copy_file("~/.bashrc.cespare")
copy_file("~/.inputrc")

out, _, p = run("#{SSH} #{USER}@#{HOST} grep cespare-sentinal ~/.bashrc")
if p == 1
  # Our snippet isn't there
  run_and_abort(%Q[#{SSH} #{USER}@#{HOST} "echo 'source ~/.bashrc.cespare # cespare-sentinal' >> ~/.bashrc"])
end

puts "Success!"
