System setup notes and installation/compiler settings.

[A]: Arch
[U]: Ubuntu
[D]: Desktop
[LT]: Laptop

###### Ubuntu initial setup ######

Install Ubuntu Desktop normally
Install packages
  brightnessctl
  btop
  build-essential
  curl
  fonts-roboto
  fuzzel
  gh
  gnome-tweaks
  grimshot
  htop
  l3afpad
  mako-notifier
  openssh-server
  pamixer
  pavucontrol
  playerctl
  python-is-python3
  python3-pip
  ripgrep
  ristretto
  screen
  sway
  swayidle
  swaylock
  tmux
  ttf-mscorefonts-installer
  wl-clipboard
  wtype
  xdg-desktop-portal-wlr
Install a few packages from PPAs:
  Git: sudo add-apt-repository ppa:git-core/ppa
  Fish: sudo apt-add-repository ppa:fish-shell/release-4
Install neovim following directions below.

##### Arch initial setup #####

Follow the normal install guide at https://wiki.archlinux.org/title/Installation_guide
For disk setup, use LVM on LUKS: https://wiki.archlinux.org/title/Dm-crypt/Encrypting_an_entire_system#LVM_on_LUKS
  Also see https://gist.github.com/huntrar/e42aee630bee3295b2c671d098c81268 (slightly outdated)
  Disk layout:
    nvme0n1p1 /boot; ESP mounted here
    nvme0n1p2 LVM on LUKS (named cryptlvm)
      swap    same size as ram, for hibernation
      /       40 GB
      /home   60 GB
      /data   remaining space
Essential packages install:
  pacstrap /mnt base linux linux-firmware mkinitcpio lvm2 neovim iwd
For fstab, change relatime to noatime
mkinitcpio.conf required adding "encrypt lvm2"
Grub
  pacman -S grub
  (Didn't customize /etc/default/grub at this point)
  grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=grub
  grub-mkconfig -o /boot/grub/grub.cfg
Reboot to new system
Networking with systemd-networkd (see http://www.lukylx.org/installation/essentials-installation.html)
  /etc/systemd/network/25-wireless.network
    [Match]
    Name=w*
    [Network]
    DHCP=yes
    IgnoreCarrierLoss=3s
  systemctl enable --now systemd-networkd
  systemctl enable --now systemd-resolved
  ln -sf /usr/lib/systemd/resolv.conf /etc/resolv.conf
  systemctl enable --now iwd
  iwctl -> connect
  (Once sway is running, I use iwgtk instead)
Install zsh, sudo         # TODO: update to fish
User creation: useradd -m -G adm,log,sys,wheel -s /bin/zsh caleb
  EDITOR=vim visudo and give wheel sudo access
  Then I can log in as my user
Install many packages
  base-devel
  brightnessctl
  fuzzel
  git
  github-cli
  gnome-tweaks
  htop
  l3afpad
  mako
  man-db
  nautilus
  openssh
  pamixer
  pavucontrol
  playerctl
  polkit
  ripgrep
  screen
  sway
  swaybg
  swayidle
  swaylock
  tmux
  ttf-roboto
  waybar
  wl-clipboard
  wtype
  xcursor-vanilla-dmz
  xdg-desktop-portal-wlr
  xorg-xwayland
  Choose droid as ttf-font
Install yay
  cd apps && git clone https://aur.archlinux.org/yay.git
  cd yay && makepkg -si
Install some yay packages
  grimshot
  yaru-gtk-theme
  yaru-icon-theme

##### Common Ubuntu/Arch Sway setup #####

Copy in SSH keys from backup/previous installation
Clone dotfiles:
  git init .
  git remote add origin git@github.com:cespare/dotfiles.git
  git pull origin main
  git su
Clone neovim config:
  git clone git@github.com:cespare/nvim-config.git .config/nvim
  cd .config/nvim
  git su
Clone private repo at ~/private
Refresh font cache: fc-cache
[U] sudo update-alternatives --config editor
  choose nvim
Install ghostty following directions below
Install Go
  https://go.dev/doc/install and download latest release
  mkdir $GOROOT_BOOTSTRAP && cd $GOROOT_BOOTSTRAP
  tar -xzf ~/Downloads/go.xyz.tgz && mv go/* ./ && rmdir go
  cd ~/apps
  git clone https://go.googlesource.com/go go
  cp -r go godev
  cd go/src && git checkout <tag> && ./all.bash
Install my own tools from the utils repo
  swayctrl
  cputemp
  barclock
Passwordless sudo:
  sudo visudo
  Change appropriate line to: %sudo	ALL=(ALL:ALL) NOPASSWD: ALL
[LT] Let brightnessctl work without root by adding myself to the video group
  sudo usermod -a -G video caleb
Install waybar via directions below
Start Sway
Launch ghostty
Install Chrome ([U] Use deb; [A] yay -S google-chrome)
  chrome://flags > Preferred Ozone platform "Auto" > Relaunch
  Sign into Google
  Sign into 1Password
  [D] Settings > Appearance > Page zoom 125%
  Settings > Appearance > Use system title bar and borders
Install fzf: go install github.com/junegunn/fzf@latest
Activate the ssh-agent systemd unit:
  systemctl --user enable --now ssh-agent
[U+LT] Follow directions below to switch from NetworkManager to systemd-networkd.
Configure ssh server not to accept passwords (`PasswordAuthentication no`)
Raise file descriptor limits by editing /etc/security/limits.conf to have
  *                soft    nofile          50000
  *                hard    nofile          50000
Install and configure syncthing (see details in home repo).
[A+LT] Set up suspend and hibernation.
  Suspend should work out of the box but hibernation takes some tweaks.
  Using LVM on LUKS makes it pretty easy.
  Add "resume" to /etc/mkinitcpio.conf: ...lvm2 filesystems resume fsck
  Regenerate initramfs with 'sudo mkinitcpio -p linux'
  Edit /etc/default/grub to append to GRUB_CMDLINE_LINUX_DEFAULT "resume=UUID=<uuid of swap partition>"
  Regnerate grub with 'sudo grub-mkconfig -o /boot/grub/grub.cfg'
  Now hibernation should work (can test with 'systemctl hibernate')
  Edit /etc/systemd/logind.conf to add a few non-default opts:
    HandleSuspendKey=ignore
    HandleSuspendKeyLongPress=ignore
    HandleLidSwitch=suspend-then-hibernate
    HandleLidSwitchExternalPower=suspend-then-hibernate
    (We'll handle idle suspend with sway)
  Edit /etc/systemd/sleep.conf to change one option:
    HibernateDelaySec=3h
[A+LT] At 4k, TTY text is extremely small. Run grub at a lower resolution:
  Edit /etc/default/grub and change the GRUB_GFXMODE line to
    GRUB_GFXMODE=1920x1440,auto
  (Or whatever an appropriate resolution is. Use grub's 'videoinfo' command to
  see the supported options.)
  Regenerate grub with 'sudo grub-mkconfig -o /boot/grub/grub.cfg'
  The Linux framebuffer resolution/font seems to be reasonable by default.
Configure application associations by editing ~/.config/mimeapps.list.
  (No longer stored in git because it gets edited all the time.)
  Example:
    [Default Applications]
    text/html=google-chrome.desktop
    x-scheme-handler/http=google-chrome.desktop
    x-scheme-handler/https=google-chrome.desktop
    x-scheme-handler/about=google-chrome.desktop
    x-scheme-handler/unknown=google-chrome.desktop
    x-scheme-handler/webcal=google-chrome.desktop
    x-scheme-handler/mailto=google-chrome.desktop
    inode/directory=org.gnome.Nautilus
    image/png=org.xfce.ristretto.desktop
    image/jpeg=org.xfce.ristretto.desktop;
    application/pdf=google-chrome.desktop;

##### Package manager notes #####

# Arch

Install/update a normal package with 'sudo pacman -S <pkgname>'.
Install/update an AUR package with 'yay -S <pkgname>'.

Run a system update with, simply, 'yay'.

This internally runs a pacman update ('sudo pacman -Syu') followed by AUR
updates ('yay -Syu').

##### Install instructions #####

# Neovim

As of May 2023, the neovim "stable" PPA is quite stale. Build the latest stable
release from source:

sudo apt install ninja-build gettext cmake unzip curl
cd ~/apps && git clone https://github.com/neovim/neovim && cd neovim
git pull --tags --force   # they bump a 'stable' tag
git checkout stable
make CMAKE_BUILD_TYPE=RelWithDebInfo
# Install using dpkg rather than 'sudo make install' to make it easier to remove.
cd build && cpack -G DEB && sudo dpkg -i nvim-linux-x86_64.deb
# Set nvim as the default editor.
sudo update-alternatives --install /usr/bin/editor editor /usr/bin/nvim 1
sudo update-alternatives --set editor /usr/bin/nvim

# GIMP

The 2.xx versions in Ubuntu don't have Wayland (gtk 3) support.
One way to install a newer version is with flatpak:

sudo apt install flatpak
flatpak install --user https://flathub.org/beta-repo/appstream/org.gimp.GIMP.flatpakref
Run with: flatpak run org.gimp.GIMP//beta

# Slack

Slack on Wayland needs special treatment. First, install:

Ubuntu: download the .deb
Arch: yay -S slack-desktop

Then:

cp /usr/share/applications/slack.desktop ~/.local/share/applications/
Edit ~/.local/share/applications/slack.desktop to add flags:
--ozone-platform=wayland --enable-features=UseOzonePlatform,WebRTCPipeWireCapturer

[D] In preferences > Accessibility, set Zoom to 125%.

# Discord

This is similar to Slack.

Ubuntu: install the app from .deb: https://discord.com/download
        or from snap: sudo snap install discord
Arch: yay -S discord

cp /usr/share/applications/discord.desktop ~/.local/share/applications/
(or from /var/lib/snapd/desktop/applications/discord_discord.desktop)
Edit ~/.local/share/applications/discord.desktop to add flags:
--ozone-platform=wayland --enable-features=UseOzonePlatform,WebRTCPipeWireCapturer

[D] In user settings > Appearance, change Zoom Level to 125%.

# Mount GCS bucket

Install gcsfuse (https://github.com/GoogleCloudPlatform/gcsfuse) and
authenticate.

Add fstab entry:

    home.ctrl-c.us  /mnt/gcs gcsfuse rw,noauto,user

# PostgreSQL

Ubuntu:

Use these directions to install a particular Postgres version: https://www.postgresql.org/download/linux/ubuntu/
Make my own user be a Postgres superuser. Run this from /:

  sudo -u postgres createuser -s caleb

Edit /etc/postgresql/15/main/pg_hba.conf as root. Change the lines at the bottom
to have METHOD "trust".

Edit /etc/postgresql/15/main/postgresql.conf to have fsync=off.

Apply settings with 'sudo systemctl restart postgresql'.

Arch:

(Directions adapted from https://wiki.archlinux.org/title/PostgreSQL.)

Install: sudo pacman -S postgresql

Create the data dir:

  mkdir -p /data/postgres/data
  chown -R postgres:postgres /data/postgres

As the postgres user, initialize the data dir:

  sudo -iu postgres
  initdb --locale=C.UTF-8 --encoding=UTF8 -D /data/postgres/data
  sudo systemctl enable --now postgresql.service      NOTE: this will fail
  sudo systemctl edit postgresql.service --drop-in pgroot.conf

Add these contents:

  [Service]
  Environment=PGROOT=/data/postgres
  PIDFile=/data/postgres/data/postmaster.pid

Then 'sudo systemctl restart postgresql' should work.

Edit /data/postgres/data/postgresql.conf and set fsync=off. Reload the service.
(The default pg_hba.conf settings should be fine.)

Make my own user be a postgres superuser (run from /):

  sudo -u postgres createuser -s caleb

Edit the pacman config to ignore the postgresql package when running updates (so
we won't do random major-version postgres updates which require database format
changes):

* Edit `/etc/pacman.conf`
* Add `IgnorePkg = postgresql`

Note that this means that system updates can sometimes break Postgres (because
it's not getting updated with its dependencies). When this happens, check the
current installed version with

  pacman -Q | grep postgres

If the required update is just a minor version change, it's generally safe to
manually install (overriding the IgnorePkg directive):

  sudo pacman -Sy postgresql postgresql-libs

If it's a major version upgrade, see
https://wiki.archlinux.org/title/PostgreSQL#Upgrading_PostgreSQL.

# Zig

Download a tarball from https://ziglang.org/download/.

  mkdir -p ~/3p/zig
  cd ~/3p/zig
  tar xf ~/Downloads/path/to/zig.tar.xz --strip-components=1

Fish config adds ~/3p/zig to $PATH.

# Ghostty

Ubuntu: download the latest deb from https://github.com/mkasberg/ghostty-ubuntu
and install it. TODO: hopefully there's a proper PPA set up next time I need
this.

## Install Ghostty from source

Install zig. You need the exact version ghostty wants (0.14 as of March 2025).
Clone https://github.com/ghostty-org/ghostty.

Install dependencies. Ubuntu:

  sudo apt install \
    blueprint-compiler \
    libadwaita-1-dev \
    libgtk-4-dev \
    libxml2-utils

Arch:

  sudo pacman -S gtk4 libadwaita

Then build and install:

  zig build -p $HOME/.local -Doptimize=ReleaseFast

# Yubikey

For FIDO2 (passkey) operation, a PIN is required. This can be altered using
Yubico's CLI or GUI tools, but an easier way is to use Chrome:

    chrome://settings/securityKeys

This can be used to change the PIN.

NOTE: It doesn't seem like any of the below is needed in newer Ubuntu.

OTP is annoying because it spews a bunch of text when you touch it. To prevent
this, change the Yubikey's mode to FIDO only. First, install ykman.

Ubuntu: sudo apt install ykman
Arch: sudo pacman -S yubikey-manager

Then:

  ykman config mode FIDO+CCID

See https://developers.yubico.com/libu2f-host/Mode_switch_YubiKey.html for more
information about the modes. (But it's FIDO now, not U2F.)

Newer yubikeys are different. This is probably the command (untested):

  ykman config usb --disable otp

# EAP wifi

This is used for some WeWorks.

Create `/var/lib/iwd/<ssid>.8021x`. Contents:

    [Security]
    EAP-Method=PEAP
    EAP-Identity=anonymous
    EAP-PEAP-Phase2-Method=MSCHAPV2
    EAP-PEAP-Phase2-Identity=<email>
    EAP-PEAP-Phase2-Password=<password>

This should get picked up automatically. Then you can connect with iwgtk.

# FW13 Bios updates

Easy once Ubuntu is installed:

    fwupdmgr refresh
    fwupdmgr get-updates
    fwupdmgr update

# Ubuntu TPM / Full Disk Encryption notes

In Ubuntu 24.04+, you can select TPM-based FDE in the installer. But it can be
hard to coax it to offer that option. On FW13, I had to:

* Not use Ventoy -- copy the ISO to a flash device normally
* Go into the BIOS and clear TPM
* Not select "install third-party drivers" during the installer

After the install, run

    snap recovery --show-keys

and print out the recovery key and keep somewhere safe.

# Switching Ubuntu from NetworkManager to systemd-networkd

  sudo apt install iwd
  sudo systemctl disable --now NetworkManager
  sudo systemctl mask NetworkManager
  sudo systemctl enable --now systemd-networkd
  sudo systemctl enable --now iwd

Create .network file for wifi at /etc/systemd/network/25-wireless.network:

    [Match]
    Name=w*
    [Network]
    DHCP=yes
    IgnoreCarrierLoss=3s

Now the networking should work, or if it doesn't use iwctl to connect.

Next, install iwgtk. No package, so do this from source.

    cd ~/3p && gh repo clone J-Lentz/iwgtk
    cd iwgtk
    # check out latest release tag
    sudo apt install libgtk-4-dev libqrencode-dev adwaita-icon-theme meson scdoc
    meson setup build
    cd build
    meson compile
    sudo meson install

Now clicking on the network icon in waybar should work.

# Waybar

The version of waybar in Ubuntu 24.04 (0.9.24) reports buggy CPU usage numbers.
Build from source instead. Be careful about picking the latest release -- this
project has lots of bugs. As of Feb 2025 the latest release (0.11.0) breaks the
application tray. The previous release (0.10.4) seems to work OK.

sudo apt install \
  clang-tidy \
  gobject-introspection \
  libdbusmenu-gtk3-dev \
  libevdev-dev \
  libfmt-dev \
  libgirepository1.0-dev \
  libgtk-3-dev \
  libgtkmm-3.0-dev \
  libiniparser-dev \
  libinput-dev \
  libjsoncpp-dev \
  libmpdclient-dev \
  libnl-3-dev \
  libnl-genl-3-dev \
  libpulse-dev \
  libsigc++-2.0-dev \
  libspdlog-dev \
  libwayland-dev \
  libxkbregistry-dev \
  meson \
  scdoc \
  upower
mkdir -p ~/apps/waybar && cd ~/apps/waybar
git clone https://github.com/Alexays/Waybar .
meson build
ninja -C build
cp ./build/waybar ~/bin

------------- BELOW THIS LINE IS PROBABLY OUTDATED/UNNECESSARY -----------------

# Mako

(No longer needed in Ubuntu 24.04+.)

Ubuntu 22.04 ships with mako 1.6 which has a bug that makes it eventually stop
working. Build from source to get a more recent version (1.8+):

sudo apt install \
  jq \
  libcairo2-dev \
  libgdk-pixbuf-2.0-dev \
  libpango1.0-dev \
  libsystemd-dev \
  libwayland-dev \
  meson \
  scdoc
gh repo clone emersion/mako ~/apps/mako
cd ~/apps/mako
meson build
ninja -C build
sudo ninja -C build install

The below was previously necessary with the apt package.
TODO: next time I do a setup, check whether it's still needed.

On Ubuntu 22.04, there's a permission issue and it doesn't launch by default.
https://github.com/emersion/mako/issues/257
Fix with:
sudo apt install apparmor-utils
sudo aa-disable /etc/apparmor.d/fr.emersion.Mako

# Fuzzel

(No longer needed in Ubuntu 24.04+.)

Fuzzel is not in the Ubuntu 22.04 repos. It looks like it will be in 23.04 and
beyond. For now, build from source:

sudo apt install \
  libpixman-1-dev \
  libwayland-dev \
  libxkbcommon-dev \
  libcairo2-dev \
  libpng-dev \
  librsvg2-dev \
  meson \
  ninja-build \
  scdoc
mkdir -p ~/apps/fuzzel && cd ~/apps/fuzzel
git clone https://codeberg.org/dnkl/fuzzel.git .
mkdir -p bld/release && cd bld/release
meson \
  --buildtype=release \
  -Denable-cairo=enabled \
  -Dpng-backend=libpng \
  -Dsvg-backend=librsvg \
  --prefix=/usr \
  ../..
ninja
sudo ninja install

# pamixer

(No longer needed in Ubuntu 24.04+.)

Pamixer is not in the Ubuntu 22.04 repos. Build from source:

sudo apt install \
  libpulse-dev \
  libcxxopts-dev
mkdir -p ~/apps/pamixer && cd ~/apps/pamixer
git clone https://github.com/cdemoulins/pamixer.git .
meson setup build
meson compile -C build
sudo meson install -C build
